//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Evaluant.Uss.SqlMapper.Mapping
{
	/// <summary>
	/// DomainRelationship EntityHasReferences
	/// Description for Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences
	/// </summary>
	[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("88f57ad0-da31-42f1-97e7-ebe6b1a38108")]
	public partial class EntityHasReferences : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasReferences domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x88f57ad0, 0xda31, 0x42f1, 0x97, 0xe7, 0xeb, 0xe6, 0xb1, 0xa3, 0x81, 0x08);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasReferences link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Reference to use as the target of the relationship.</param>
		public EntityHasReferences(Entity source, Reference target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasReferences.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasReferences.ReferenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasReferences(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasReferences(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasReferences(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasReferences(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xa9f00092, 0xcb69, 0x4c95, 0xb8, 0x5c, 0xfa, 0xf1, 0x50, 0xf8, 0x03, 0x7d);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences/Entity.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences/Entity.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "References", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a9f00092-cb69-4c95-b85c-faf150f8037d")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Reference
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Reference element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Reference element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceDomainRoleId, newEntity);
		}
		#endregion
		#region Reference domain role code
		
		/// <summary>
		/// Reference domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceDomainRoleId = new global::System.Guid(0xb530ced2, 0x4d52, 0x41bd, 0x84, 0x27, 0x75, 0x78, 0x1c, 0x7a, 0x4f, 0x1b);
		
		/// <summary>
		/// DomainRole Reference
		/// Description for Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.Reference
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences/Reference.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences/Reference.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences/Reference.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b530ced2-4d52-41bd-8427-75781c7a4f1b")]
		public virtual Reference Reference
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reference)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access References of a Entity
		/// <summary>
		/// Gets a list of References.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Reference> GetReferences(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Reference>, Reference>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasReferences links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences> GetLinksToReferences ( global::Evaluant.Uss.SqlMapper.Mapping.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences>(entityInstance, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.EntityDomainRoleId);
		}
		#endregion
		#region Reference link accessor
		/// <summary>
		/// Get the EntityHasReferences link to a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences GetLinkToEntity (global::Evaluant.Uss.SqlMapper.Mapping.Reference referenceInstance)
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences>(referenceInstance, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.ReferenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reference not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasReferences instance accessors
		
		/// <summary>
		/// Get any EntityHasReferences links between a given Entity and a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences> GetLinks( global::Evaluant.Uss.SqlMapper.Mapping.Entity source, global::Evaluant.Uss.SqlMapper.Mapping.Reference target )
		{
			global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences> outLinks = new global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences>();
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences>(source, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.EntityDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences link in links )
			{
				if ( target.Equals(link.Reference) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasReferences link between a given Entityand a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences GetLink( global::Evaluant.Uss.SqlMapper.Mapping.Entity source, global::Evaluant.Uss.SqlMapper.Mapping.Reference target )
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences>(source, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences.EntityDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.EntityHasReferences link in links )
			{
				if ( target.Equals(link.Reference) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Evaluant.Uss.SqlMapper.Mapping
{
	/// <summary>
	/// DomainRelationship EntityHasAttributes
	/// Description for Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6b580c85-518a-40ab-9d62-fdfb1b23a12b")]
	public partial class EntityHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6b580c85, 0x518a, 0x40ab, 0x9d, 0x62, 0xfd, 0xfb, 0x1b, 0x23, 0xa1, 0x2b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasAttributes link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public EntityHasAttributes(Entity source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasAttributes.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x33b7dc22, 0x7eee, 0x4ac7, 0x88, 0xd2, 0x9b, 0x03, 0x7c, 0xaa, 0x61, 0x89);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes/Entity.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes/Entity.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("33b7dc22-7eee-4ac7-88d2-9b037caa6189")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Attribute
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Attribute element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newEntity);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0xac8b78a4, 0x955d, 0x4b1a, 0x9b, 0x54, 0x1a, 0x59, 0xc4, 0x47, 0x4e, 0xc3);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes/Attribute.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes/Attribute.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes/Attribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ac8b78a4-955d-4b1a-9b54-1a59c4474ec3")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Entity
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasAttributes links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes> GetLinksToAttributes ( global::Evaluant.Uss.SqlMapper.Mapping.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes>(entityInstance, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.EntityDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the EntityHasAttributes link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes GetLinkToEntity (global::Evaluant.Uss.SqlMapper.Mapping.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes>(attributeInstance, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasAttributes instance accessors
		
		/// <summary>
		/// Get any EntityHasAttributes links between a given Entity and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes> GetLinks( global::Evaluant.Uss.SqlMapper.Mapping.Entity source, global::Evaluant.Uss.SqlMapper.Mapping.Attribute target )
		{
			global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes> outLinks = new global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes>();
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes>(source, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.EntityDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasAttributes link between a given Entityand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes GetLink( global::Evaluant.Uss.SqlMapper.Mapping.Entity source, global::Evaluant.Uss.SqlMapper.Mapping.Attribute target )
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes>(source, global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes.EntityDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.EntityHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Evaluant.Uss.SqlMapper.Mapping
{
	/// <summary>
	/// DomainRelationship SqlMapperMappingDiagramReferencesEntityShapes
	/// Description for
	/// Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes
	/// </summary>
	[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e730d212-6a3d-4b4d-b71f-a7405d015e88")]
	public partial class SqlMapperMappingDiagramReferencesEntityShapes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SqlMapperMappingDiagramReferencesEntityShapes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe730d212, 0x6a3d, 0x4b4d, 0xb7, 0x1f, 0xa7, 0x40, 0x5d, 0x01, 0x5e, 0x88);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SqlMapperMappingDiagramReferencesEntityShapes link in the same Partition as the given SqlMapperMappingDiagram
		/// </summary>
		/// <param name="source">SqlMapperMappingDiagram to use as the source of the relationship.</param>
		/// <param name="target">EntityShape to use as the target of the relationship.</param>
		public SqlMapperMappingDiagramReferencesEntityShapes(SqlMapperMappingDiagram source, EntityShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SqlMapperMappingDiagramReferencesEntityShapes.SqlMapperMappingDiagramDomainRoleId, source), new DslModeling::RoleAssignment(SqlMapperMappingDiagramReferencesEntityShapes.EntityShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SqlMapperMappingDiagramReferencesEntityShapes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SqlMapperMappingDiagramReferencesEntityShapes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SqlMapperMappingDiagramReferencesEntityShapes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SqlMapperMappingDiagramReferencesEntityShapes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SqlMapperMappingDiagram domain role code
		
		/// <summary>
		/// SqlMapperMappingDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SqlMapperMappingDiagramDomainRoleId = new global::System.Guid(0xeee17f73, 0x8ffa, 0x469f, 0xa8, 0xc3, 0x58, 0x36, 0x19, 0xca, 0xdc, 0xda);
		
		/// <summary>
		/// DomainRole SqlMapperMappingDiagram
		/// Description for
		/// Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.SqlMapperMappingDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes/SqlMapperMappingDiagram.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes/SqlMapperMappingDiagram.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityShapes", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes/SqlMapperMappingDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("eee17f73-8ffa-469f-a8c3-583619cadcda")]
		public virtual SqlMapperMappingDiagram SqlMapperMappingDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SqlMapperMappingDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SqlMapperMappingDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SqlMapperMappingDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SqlMapperMappingDiagrams of a EntityShape
		/// <summary>
		/// Gets a list of SqlMapperMappingDiagrams.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SqlMapperMappingDiagram> GetSqlMapperMappingDiagrams(EntityShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SqlMapperMappingDiagram>, SqlMapperMappingDiagram>(element, EntityShapeDomainRoleId);
		}
		#endregion
		#region EntityShape domain role code
		
		/// <summary>
		/// EntityShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityShapeDomainRoleId = new global::System.Guid(0x4f0b9d5c, 0x2f78, 0x4880, 0x98, 0xef, 0x41, 0x78, 0x94, 0x2d, 0x54, 0x73);
		
		/// <summary>
		/// DomainRole EntityShape
		/// Description for
		/// Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.EntityShape
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes/EntityShape.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes/EntityShape.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SqlMapperMappingDiagrams", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes/EntityShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4f0b9d5c-2f78-4880-98ef-4178942d5473")]
		public virtual EntityShape EntityShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityShapes of a SqlMapperMappingDiagram
		/// <summary>
		/// Gets a list of EntityShapes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityShape> GetEntityShapes(SqlMapperMappingDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityShape>, EntityShape>(element, SqlMapperMappingDiagramDomainRoleId);
		}
		#endregion
		#region SqlMapperMappingDiagram link accessor
		/// <summary>
		/// Get the list of SqlMapperMappingDiagramReferencesEntityShapes links to a SqlMapperMappingDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes> GetLinksToEntityShapes ( global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagram sqlMapperMappingDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes>(sqlMapperMappingDiagramInstance, global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.SqlMapperMappingDiagramDomainRoleId);
		}
		#endregion
		#region EntityShape link accessor
		/// <summary>
		/// Get the list of SqlMapperMappingDiagramReferencesEntityShapes links to a EntityShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes> GetLinksToSqlMapperMappingDiagrams ( global::Evaluant.Uss.SqlMapper.Mapping.EntityShape entityShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes>(entityShapeInstance, global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.EntityShapeDomainRoleId);
		}
		#endregion
		#region SqlMapperMappingDiagramReferencesEntityShapes instance accessors
		
		/// <summary>
		/// Get any SqlMapperMappingDiagramReferencesEntityShapes links between a given SqlMapperMappingDiagram and a EntityShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes> GetLinks( global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagram source, global::Evaluant.Uss.SqlMapper.Mapping.EntityShape target )
		{
			global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes> outLinks = new global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes>();
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes>(source, global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.SqlMapperMappingDiagramDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes link in links )
			{
				if ( target.Equals(link.EntityShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SqlMapperMappingDiagramReferencesEntityShapes link between a given SqlMapperMappingDiagramand a EntityShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes GetLink( global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagram source, global::Evaluant.Uss.SqlMapper.Mapping.EntityShape target )
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes>(source, global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes.SqlMapperMappingDiagramDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDiagramReferencesEntityShapes link in links )
			{
				if ( target.Equals(link.EntityShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Evaluant.Uss.SqlMapper.Mapping
{
	/// <summary>
	/// DomainRelationship EntityShapeReferencesRelationshipshape
	/// Description for
	/// Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape
	/// </summary>
	[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fb4ce25f-a11c-4257-81ee-004b1274be42")]
	public partial class EntityShapeReferencesRelationshipshape : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityShapeReferencesRelationshipshape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb4ce25f, 0xa11c, 0x4257, 0x81, 0xee, 0x00, 0x4b, 0x12, 0x74, 0xbe, 0x42);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityShapeReferencesRelationshipshape link in the same Partition as the given EntityShape
		/// </summary>
		/// <param name="source">EntityShape to use as the source of the relationship.</param>
		/// <param name="target">Relationshipshape to use as the target of the relationship.</param>
		public EntityShapeReferencesRelationshipshape(EntityShape source, Relationshipshape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityShapeReferencesRelationshipshape.EntityShapeDomainRoleId, source), new DslModeling::RoleAssignment(EntityShapeReferencesRelationshipshape.RelationshipshapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityShapeReferencesRelationshipshape(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityShapeReferencesRelationshipshape(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityShapeReferencesRelationshipshape(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityShapeReferencesRelationshipshape(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityShape domain role code
		
		/// <summary>
		/// EntityShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityShapeDomainRoleId = new global::System.Guid(0xfa7a81ab, 0x75a5, 0x4f8a, 0xb1, 0xb2, 0x73, 0x55, 0x01, 0xa8, 0xdf, 0x5c);
		
		/// <summary>
		/// DomainRole EntityShape
		/// Description for
		/// Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.EntityShape
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape/EntityShape.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape/EntityShape.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Relationshipshape", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape/EntityShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fa7a81ab-75a5-4f8a-b1b2-735501a8df5c")]
		public virtual EntityShape EntityShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityShapes of a Relationshipshape
		/// <summary>
		/// Gets a list of EntityShapes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityShape> GetEntityShapes(Relationshipshape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityShape>, EntityShape>(element, RelationshipshapeDomainRoleId);
		}
		#endregion
		#region Relationshipshape domain role code
		
		/// <summary>
		/// Relationshipshape domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipshapeDomainRoleId = new global::System.Guid(0xd51e6899, 0x24f2, 0x4604, 0xb8, 0x46, 0xdd, 0x5f, 0x1b, 0x46, 0x1c, 0x64);
		
		/// <summary>
		/// DomainRole Relationshipshape
		/// Description for
		/// Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.Relationshipshape
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape/Relationshipshape.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape/Relationshipshape.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityShapes", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape/Relationshipshape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d51e6899-24f2-4604-b846-dd5f1b461c64")]
		public virtual Relationshipshape Relationshipshape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationshipshape)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipshapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipshapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relationshipshape of a EntityShape
		/// <summary>
		/// Gets a list of Relationshipshape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationshipshape> GetRelationshipshape(EntityShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationshipshape>, Relationshipshape>(element, EntityShapeDomainRoleId);
		}
		#endregion
		#region EntityShape link accessor
		/// <summary>
		/// Get the list of EntityShapeReferencesRelationshipshape links to a EntityShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape> GetLinksToRelationshipshape ( global::Evaluant.Uss.SqlMapper.Mapping.EntityShape entityShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape>(entityShapeInstance, global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.EntityShapeDomainRoleId);
		}
		#endregion
		#region Relationshipshape link accessor
		/// <summary>
		/// Get the list of EntityShapeReferencesRelationshipshape links to a Relationshipshape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape> GetLinksToEntityShapes ( global::Evaluant.Uss.SqlMapper.Mapping.Relationshipshape relationshipshapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape>(relationshipshapeInstance, global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.RelationshipshapeDomainRoleId);
		}
		#endregion
		#region EntityShapeReferencesRelationshipshape instance accessors
		
		/// <summary>
		/// Get any EntityShapeReferencesRelationshipshape links between a given EntityShape and a Relationshipshape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape> GetLinks( global::Evaluant.Uss.SqlMapper.Mapping.EntityShape source, global::Evaluant.Uss.SqlMapper.Mapping.Relationshipshape target )
		{
			global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape> outLinks = new global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape>();
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape>(source, global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.EntityShapeDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape link in links )
			{
				if ( target.Equals(link.Relationshipshape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityShapeReferencesRelationshipshape link between a given EntityShapeand a Relationshipshape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape GetLink( global::Evaluant.Uss.SqlMapper.Mapping.EntityShape source, global::Evaluant.Uss.SqlMapper.Mapping.Relationshipshape target )
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape>(source, global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape.EntityShapeDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.EntityShapeReferencesRelationshipshape link in links )
			{
				if ( target.Equals(link.Relationshipshape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Evaluant.Uss.SqlMapper.Mapping
{
	/// <summary>
	/// DomainRelationship MappingHasEntities
	/// Description for Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("86b38a3b-0e4e-4853-9195-c8702ad8fa33")]
	public partial class MappingHasEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MappingHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x86b38a3b, 0x0e4e, 0x4853, 0x91, 0x95, 0xc8, 0x70, 0x2a, 0xd8, 0xfa, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MappingHasEntities link in the same Partition as the given Mapping
		/// </summary>
		/// <param name="source">Mapping to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public MappingHasEntities(Mapping source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MappingHasEntities.MappingDomainRoleId, source), new DslModeling::RoleAssignment(MappingHasEntities.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Mapping domain role code
		
		/// <summary>
		/// Mapping domain role Id.
		/// </summary>
		public static readonly global::System.Guid MappingDomainRoleId = new global::System.Guid(0x29a1f4b2, 0x48be, 0x4d6d, 0xb4, 0xfd, 0xc7, 0x01, 0xa3, 0xb5, 0x57, 0x23);
		
		/// <summary>
		/// DomainRole Mapping
		/// Description for Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.Mapping
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities/Mapping.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities/Mapping.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities/Mapping.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("29a1f4b2-48be-4d6d-b4fd-c701a3b55723")]
		public virtual Mapping Mapping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Mapping)DslModeling::DomainRoleInfo.GetRolePlayer(this, MappingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MappingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Mapping of a Entity
		/// <summary>
		/// Gets Mapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Mapping GetMapping(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityDomainRoleId) as Mapping;
		}
		
		/// <summary>
		/// Sets Mapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMapping(Entity element, Mapping newMapping)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityDomainRoleId, newMapping);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x11e725e9, 0xfe80, 0x4476, 0xa9, 0x0b, 0x78, 0x4b, 0x81, 0x33, 0xa1, 0x8f);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities/Entity.DisplayName", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities/Entity.Description", typeof(global::Evaluant.Uss.SqlMapper.Mapping.SqlMapperMappingDomainModel), "Evaluant.Uss.SqlMapper.Mapping.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Mapping", PropertyDisplayNameKey="Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities/Entity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("11e725e9-fe80-4476-a90b-784b8133a18f")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a Mapping
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(Mapping element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, MappingDomainRoleId);
		}
		#endregion
		#region Mapping link accessor
		/// <summary>
		/// Get the list of MappingHasEntities links to a Mapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities> GetLinksToEntities ( global::Evaluant.Uss.SqlMapper.Mapping.Mapping mappingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities>(mappingInstance, global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.MappingDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the MappingHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities GetLinkToMapping (global::Evaluant.Uss.SqlMapper.Mapping.Entity entityInstance)
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities>(entityInstance, global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.EntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MappingHasEntities instance accessors
		
		/// <summary>
		/// Get any MappingHasEntities links between a given Mapping and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities> GetLinks( global::Evaluant.Uss.SqlMapper.Mapping.Mapping source, global::Evaluant.Uss.SqlMapper.Mapping.Entity target )
		{
			global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities> outLinks = new global::System.Collections.Generic.List<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities>();
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities>(source, global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.MappingDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MappingHasEntities link between a given Mappingand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities GetLink( global::Evaluant.Uss.SqlMapper.Mapping.Mapping source, global::Evaluant.Uss.SqlMapper.Mapping.Entity target )
		{
			global::System.Collections.Generic.IList<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities>(source, global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities.MappingDomainRoleId);
			foreach ( global::Evaluant.Uss.SqlMapper.Mapping.MappingHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
